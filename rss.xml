<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Kaspers Tech blog RSS Feed]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 08 Jul 2023 14:34:14 GMT</lastBuildDate><item><title><![CDATA[Deploy a custom static site to Github Pages using Github Actions]]></title><description><![CDATA[Hi, this is my first blog post, and I think it would be fitting to use this opportunity to document and explain how this site is setup as ofâ€¦]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/deploy-custom-site-gh-pages/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/deploy-custom-site-gh-pages/</guid><pubDate>Sat, 08 Jul 2023 16:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, this is my first blog post, and I think it would be fitting to use this opportunity to document and explain how this site is setup as of today.&lt;/p&gt;
&lt;h1&gt;Table of contents&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#GithubPages&quot;&gt;Github Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#GithubActions&quot;&gt;Github Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#CreateRepositories&quot;&gt;Create repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#CreateStaticSite&quot;&gt;Create static site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#SetupWorkflow&quot;&gt;Setup Github Workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;Github Pages &lt;a name=&quot;GithubPages&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; is a static site server available for free at your Github account. The site will serve all static files like: HTML, Javascript, CSS, etc. In order to use it you just need to create a repository called &lt;code class=&quot;language-text&quot;&gt;&amp;lt;username&gt;.github.io&lt;/code&gt; where &lt;code class=&quot;language-text&quot;&gt;&amp;lt;username&gt;&lt;/code&gt; is your github username. In my case &lt;code class=&quot;language-text&quot;&gt;kasperlauge.github.io&lt;/code&gt;. Then just initialize the repository and push your static files to the main branch of the repository. The files will now be served at the URL &lt;code class=&quot;language-text&quot;&gt;&amp;lt;username&gt;.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Github Actions &lt;a name=&quot;GithubActions&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/features/actions&quot;&gt;Github Actions&lt;/a&gt; is a feature providing the oppertunity to control your CI/CD use YAML files. If you are familiar with Pipelines in Azure DevOps, it is a similar feature, with some syntax differences. Github Actions can as in my case be used to trigger an action when a push to a repository occurs. This action could then be to build the source code of the repository and deploying the &quot;executable&quot; code to whereever.&lt;/p&gt;
&lt;h2&gt;Create repositories &lt;a name=&quot;CreateRepositories&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Alright, so in order to create a static site, we first need to create two repositories.&lt;/p&gt;
&lt;p&gt;The first repository is called &lt;code class=&quot;language-text&quot;&gt;&amp;lt;username&gt;.github.io&lt;/code&gt;. This is what is being served on &lt;code class=&quot;language-text&quot;&gt;&amp;lt;username&gt;.github.io&lt;/code&gt;. create the repository with the following settings (of course changing the username to your own):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./gh-pages-repo.png&quot; alt=&quot;Create Github Pages repository&quot;&gt;&lt;/p&gt;
&lt;p&gt;We initialize the repository with an empty readme so we don&apos;t have to do it manually. We will overwrite whats in the repository via a Github Workflow anyway.&lt;/p&gt;
&lt;p&gt;Next create the repository actually containing the code. You can use the following settings:
&lt;img src=&quot;./gh-pages-repo-code.png&quot; alt=&quot;Create Github Pages code repository&quot;&gt;&lt;/p&gt;
&lt;p&gt;I would like to keep the repository private. There is no reason to initialize this repository, as we need to add some code and can just do that from the command line.&lt;/p&gt;
&lt;h2&gt;Create a static site &lt;a name=&quot;CreateStaticSite&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to have something to show we need to create a site. This can be whatever static files you want to show. I chose to create a &lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;GatsbyJs&lt;/a&gt; site using the blog template created by Kyle Mathews at GatsbyJS. This provides an out-of-the-box performant blog powered by markdown posts. A fast way to get started. As mentioned the site could be whatever as long as it is based of static files like HTML, Javascript, CSS, etc files. This could eg. be a SPA written in Angular or React, or also simply a plain index.html file.&lt;/p&gt;
&lt;p&gt;Using the GatsbyJS template I got roughly (I have removed the standard blog md files, and replaced with my own.) the following files:
&lt;img src=&quot;./static-site.png&quot; alt=&quot;Static site files&quot;&gt;&lt;/p&gt;
&lt;p&gt;Lets connect the code to our repository. Type the following in the terminal in the directory for the created code.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;git init
git add .
git commit -m &quot;First commit&quot;
git remote add origin https://github.com/kasperlauge/my-blog.git
git push -u origin main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;* Replace repository in line 4 with your own&lt;/p&gt;
&lt;p&gt;Now we have a static site ready to be deployed.&lt;/p&gt;
&lt;h2&gt;Setup Github Workflow &lt;a name=&quot;SetupWorkflow&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to deploy to Github pages we could:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build our source files from &lt;code class=&quot;language-text&quot;&gt;my-blog&lt;/code&gt; locally&lt;/li&gt;
&lt;li&gt;Clone the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;username&gt;.github-io&lt;/code&gt; repository&lt;/li&gt;
&lt;li&gt;Replace the files of said repository&lt;/li&gt;
&lt;li&gt;Commit and push to the main branch&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But that is a lot of manual steps to perform, which I would like to automate. This can be automated using a Github Action.&lt;/p&gt;
&lt;p&gt;You can create a Workflow using Github actions by navigating to your repository and click on the &quot;Actions&quot;-tab.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./gh-actions.png&quot; alt=&quot;Find Github Actions&quot;&gt;&lt;/p&gt;
&lt;p&gt;What this basically does, is creating a a YAML-file in a &lt;code class=&quot;language-text&quot;&gt;.github/workflows&lt;/code&gt; folder using some predefined templates. It is not necessary to create a workflow using the UI, but can be done using just code by creating said file in the same location.&lt;/p&gt;
&lt;p&gt;The actions we would need to do in a workflow file is similar to the manual steps described above, but with a few extra steps in order to have a full workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the source files from &lt;code class=&quot;language-text&quot;&gt;my-blog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Build our source files from &lt;code class=&quot;language-text&quot;&gt;my-blog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Clone the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;username&gt;.github-io&lt;/code&gt; repository&lt;/li&gt;
&lt;li&gt;Replace the files of said repository with the build files from &lt;code class=&quot;language-text&quot;&gt;my-blog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Commit and push to the main branch of the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;username&gt;.github-io&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the end this results in the following file:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;.github/worksflow/build-and-deploy.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# This is a basic workflow to help you get started with Actions

name: Build and deploy to root pages

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the &quot;main&quot; branch
  push:
    branches: [&quot;main&quot;]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  copy-files:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          node-version: ${{ matrix.node-version }}
          path: &quot;src&quot;
          ref: &quot;main&quot;
          persist-credentials: false
      - run: npm install --prefix src
      - run: npm run build --prefix src
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: &quot;dest&quot;
          ref: &quot;main&quot;
          repository: &quot;kasperlauge/kasperlauge.github.io&quot;
          token: ${{ secrets.BOT_TOKEN }}
          fetch-depth: 0
          persist-credentials: true
      - name: Copy build files to kasperlauge.github.io
        shell: bash
        run: |
          find dest -mindepth 1 -not -path &apos;dest/.git*&apos; -delete
          cp -r ./src/public/. ./dest/
      - name: Check for new files
        id: newFiles
        shell: bash
        working-directory: dest
        run: |
          git add -A
          git status --porcelain | wc -l
          if [[ $(git status --porcelain | wc -l) -gt 0 ]]; then
            echo &quot;::set-output name=hasNewFiles::true&quot;
          else
            echo &quot;::set-output name=hasNewFiles::false&quot;
          fi
      - name: Push new files
        if: ${{ steps.newFiles.outputs.hasNewFiles == &apos;true&apos; }}
        shell: bash
        working-directory: dest
        run: |
          git config --global user.name &quot;Kasper [bot]&quot;
          git config --global user.email &quot;${{ secrets.BOT_EMAIL }}&quot;
          git commit -m &quot;maint: Updated build files&quot;
          git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The contents of above file can roughly be explained as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Trigger on push to &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;Use nodejs 18.x version&lt;/li&gt;
&lt;li&gt;Check out &lt;code class=&quot;language-text&quot;&gt;my-blog&lt;/code&gt; repository to &lt;code class=&quot;language-text&quot;&gt;src&lt;/code&gt;-folder&lt;/li&gt;
&lt;li&gt;Run &lt;code class=&quot;language-text&quot;&gt;npm install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code class=&quot;language-text&quot;&gt;npm run build&lt;/code&gt; (this is what builds the source code files into a &lt;code class=&quot;language-text&quot;&gt;public&lt;/code&gt;-folder)&lt;/li&gt;
&lt;li&gt;Check out &lt;code class=&quot;language-text&quot;&gt;&amp;lt;username&gt;.github.io&lt;/code&gt;-repository to &lt;code class=&quot;language-text&quot;&gt;dest&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;Delete contents of &lt;code class=&quot;language-text&quot;&gt;dest&lt;/code&gt;-folder&lt;/li&gt;
&lt;li&gt;Copy contents of &lt;code class=&quot;language-text&quot;&gt;src/public&lt;/code&gt;-folder to &lt;code class=&quot;language-text&quot;&gt;dest&lt;/code&gt;-folder&lt;/li&gt;
&lt;li&gt;Check if any changes to the &lt;code class=&quot;language-text&quot;&gt;dest&lt;/code&gt;-folder&lt;/li&gt;
&lt;li&gt;If any changes to &lt;code class=&quot;language-text&quot;&gt;dest&lt;/code&gt;-folder push contents to &lt;code class=&quot;language-text&quot;&gt;&amp;lt;username&gt;.github.io&lt;/code&gt;-repository&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You might have noticed in above file that two secret variables are referenced:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;secrets.BOT_EMAIL&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;secrets.BOT_TOKEN&lt;/code&gt;. These variables are setup in in the &lt;code class=&quot;language-text&quot;&gt;Settings&lt;/code&gt;-tab, as shown in below image:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./secret-setup.png&quot; alt=&quot;Secret setup&quot;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;BOT_EMAIL&lt;/code&gt; can be whatever email. I used &lt;code class=&quot;language-text&quot;&gt;kasperbot@kasperlauge.io&lt;/code&gt;. This is just used for the commit made by the Github Workflow. The &lt;code class=&quot;language-text&quot;&gt;BOT_TOKEN&lt;/code&gt; should be a token with access to the &lt;code class=&quot;language-text&quot;&gt;&amp;lt;username&gt;.github.io&lt;/code&gt; repository. This is created by navigating to:
Account (by clicking you profile icon on the top right) &gt; Settings &gt; Developer Settings &gt; Personal Access Tokens &gt; Tokens (classic)
Then press &lt;code class=&quot;language-text&quot;&gt;Generate new token&lt;/code&gt; (Choose classic).&lt;/p&gt;
&lt;p&gt;Generate the token with the following settings (The settings not shown is empty):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./token-settings.png&quot; alt=&quot;Token setup&quot;&gt;&lt;/p&gt;
&lt;p&gt;Copy the token and paste it in the secrets for the &lt;code class=&quot;language-text&quot;&gt;my-blog&lt;/code&gt; repository. Name it &lt;code class=&quot;language-text&quot;&gt;BOT_TOKEN&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now we should be ready to deploy. Make a small change to your &lt;code class=&quot;language-text&quot;&gt;my-blog&lt;/code&gt; repository. Commit and push that change, and see your Workflow in action.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./workflow-action.png&quot; alt=&quot;Github Action&quot;&gt;&lt;/p&gt;
&lt;p&gt;And thats it! Now you should have a custom static static site running on Github Pages using a CI/CD flow. You can change your static site to what ever and after you push to your repository, it should be automatically deployed to Github Pages.&lt;/p&gt;</content:encoded></item></channel></rss>